-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LabelSelect_Batch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (79 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    numReps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    numReps_empty_n : IN STD_LOGIC;
    numReps_read : OUT STD_LOGIC );
end;


architecture behav of LabelSelect_Batch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln374_reg_802 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln401_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal numReps_blk_n : STD_LOGIC;
    signal topval_1_V_reg_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_reg_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_V_0_0_i_reg_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal toplabels_2_V_reg_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_0_i_reg_172 : STD_LOGIC_VECTOR (1 downto 0);
    signal numReps_read_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln368_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal reps_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reps_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln374_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln374_reg_802_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln374_reg_802_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln374_reg_802_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln374_reg_802_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal block_fu_220_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal topval_0_V_20_fu_226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_20_reg_811 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_20_reg_811_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_20_reg_811_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_21_reg_821 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_21_reg_821_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_21_reg_821_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_22_reg_831 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_22_reg_831_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_22_reg_831_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_23_reg_841 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_23_reg_841_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_23_reg_841_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_23_reg_841_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_24_reg_851 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_24_reg_851_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_24_reg_851_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_24_reg_851_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_2_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_2_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_2_reg_861_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_2_reg_861_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_2_V_9_fu_275_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_2_V_9_reg_868 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_5_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_5_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_5_reg_873_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_5_reg_873_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_2_V_10_fu_287_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_2_V_10_reg_880 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_8_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_8_reg_885 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_8_reg_885_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_8_reg_885_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_2_V_fu_299_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_2_V_reg_892 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_2_V_reg_892_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_11_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_11_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_11_reg_898_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_11_reg_898_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_reg_906_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_1_V_20_fu_322_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_1_V_20_reg_913 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_4_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_4_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_4_reg_918_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_1_V_21_fu_340_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_1_V_21_reg_925 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_7_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_7_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_7_reg_930_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_1_V_22_fu_358_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_1_V_22_reg_937 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_1_V_22_reg_937_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_10_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_10_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_10_reg_943_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_2_V_11_fu_371_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_2_V_11_reg_951 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_14_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_14_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_14_reg_956_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_2_V_8_fu_381_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln895_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_3_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_3_reg_973 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_6_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_6_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_0_V_11_fu_435_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_11_reg_983 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_9_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_9_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_1_V_23_fu_453_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_1_V_23_reg_994 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_13_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_13_reg_999 : STD_LOGIC_VECTOR (0 downto 0);
    signal topval_1_V_19_fu_469_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal idx_fu_477_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal topval_0_V_19_fu_695_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topx_fu_745_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal reps_0_i_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_topval_1_V_phi_fu_128_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_topval_0_V_phi_fu_140_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_topval_V_0_0_i_phi_fu_152_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal topx3_0_i_reg_183 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal toplabels_0_V_10_fu_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_0_V_19_fu_687_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_1_V_10_fu_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_1_V_19_fu_710_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_2_V_12_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_2_V_23_fu_717_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_V_fu_757_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal topval_1_V_2_fu_316_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_1_V_6_fu_335_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_1_V_10_fu_353_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_2_fu_393_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_3_fu_399_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_6_fu_412_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_7_fu_417_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_0_V_10_fu_430_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_1_V_14_fu_448_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_1_V_18_fu_464_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal toplabels_0_V_fu_487_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_1_V_fu_501_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln895_fu_483_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal toplabels_2_V_14_fu_522_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal toplabels_1_V_11_fu_508_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_2_V_15_fu_528_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_0_V_12_fu_532_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_0_V_11_fu_494_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_2_V_13_fu_515_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_1_V_12_fu_546_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_2_V_17_fu_567_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal toplabels_1_V_13_fu_553_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_2_V_18_fu_573_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_0_V_14_fu_577_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_0_V_13_fu_539_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_2_V_16_fu_560_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_1_V_14_fu_591_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_1_V_15_fu_598_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_2_V_20_fu_612_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_0_V_16_fu_623_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_0_V_15_fu_584_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal topval_0_V_14_fu_618_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal toplabels_2_V_19_fu_605_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_1_V_16_fu_643_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal topval_0_V_15_fu_637_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal toplabels_1_V_17_fu_650_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_2_V_22_fu_664_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_12_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal toplabels_0_V_18_fu_680_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_0_V_17_fu_630_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal topval_0_V_18_fu_675_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal toplabels_2_V_21_fu_657_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal toplabels_1_V_18_fu_703_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_V_fu_757_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Testbench_label_sbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    Testbench_label_sbkb_U5 : component Testbench_label_sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => toplabels_0_V_10_fu_82,
        din1 => toplabels_1_V_10_fu_86,
        din2 => toplabels_2_V_12_fu_90,
        din3 => tmp_V_fu_757_p4,
        dout => tmp_V_fu_757_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln368_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln368_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((icmp_ln368_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    block_0_i_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln368_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                block_0_i_reg_172 <= ap_const_lv2_0;
            elsif (((icmp_ln374_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                block_0_i_reg_172 <= block_fu_220_p2;
            end if; 
        end if;
    end process;

    reps_0_i_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0))) and (icmp_ln401_fu_739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                reps_0_i_reg_113 <= reps_reg_797;
            elsif ((not(((numReps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                reps_0_i_reg_113 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    toplabels_2_V_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln368_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                toplabels_2_V_reg_160 <= ap_const_lv4_0;
            elsif (((icmp_ln374_reg_802_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                toplabels_2_V_reg_160 <= idx_fu_477_p2;
            end if; 
        end if;
    end process;

    topval_0_V_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln368_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                topval_0_V_reg_136 <= ap_const_lv16_8000;
            elsif (((icmp_ln374_reg_802_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                topval_0_V_reg_136 <= topval_1_V_19_fu_469_p3;
            end if; 
        end if;
    end process;

    topval_1_V_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln368_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                topval_1_V_reg_124 <= ap_const_lv16_8000;
            elsif (((icmp_ln374_reg_802_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                topval_1_V_reg_124 <= topval_2_V_8_fu_381_p3;
            end if; 
        end if;
    end process;

    topval_V_0_0_i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln368_fu_203_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                topval_V_0_0_i_reg_148 <= ap_const_lv16_8000;
            elsif (((icmp_ln374_reg_802_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                topval_V_0_0_i_reg_148 <= topval_0_V_19_fu_695_p3;
            end if; 
        end if;
    end process;

    topx3_0_i_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                topx3_0_i_reg_183 <= ap_const_lv2_0;
            elsif ((not(((icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0))) and (icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                topx3_0_i_reg_183 <= topx_fu_745_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln374_reg_802 <= icmp_ln374_fu_214_p2;
                icmp_ln374_reg_802_pp0_iter1_reg <= icmp_ln374_reg_802;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln374_reg_802_pp0_iter2_reg <= icmp_ln374_reg_802_pp0_iter1_reg;
                icmp_ln374_reg_802_pp0_iter3_reg <= icmp_ln374_reg_802_pp0_iter2_reg;
                icmp_ln374_reg_802_pp0_iter4_reg <= icmp_ln374_reg_802_pp0_iter3_reg;
                icmp_ln895_10_reg_943_pp0_iter4_reg <= icmp_ln895_10_reg_943;
                icmp_ln895_11_reg_898_pp0_iter3_reg <= icmp_ln895_11_reg_898;
                icmp_ln895_11_reg_898_pp0_iter4_reg <= icmp_ln895_11_reg_898_pp0_iter3_reg;
                icmp_ln895_14_reg_956_pp0_iter4_reg <= icmp_ln895_14_reg_956;
                icmp_ln895_1_reg_906_pp0_iter4_reg <= icmp_ln895_1_reg_906;
                icmp_ln895_2_reg_861_pp0_iter3_reg <= icmp_ln895_2_reg_861;
                icmp_ln895_2_reg_861_pp0_iter4_reg <= icmp_ln895_2_reg_861_pp0_iter3_reg;
                icmp_ln895_4_reg_918_pp0_iter4_reg <= icmp_ln895_4_reg_918;
                icmp_ln895_5_reg_873_pp0_iter3_reg <= icmp_ln895_5_reg_873;
                icmp_ln895_5_reg_873_pp0_iter4_reg <= icmp_ln895_5_reg_873_pp0_iter3_reg;
                icmp_ln895_7_reg_930_pp0_iter4_reg <= icmp_ln895_7_reg_930;
                icmp_ln895_8_reg_885_pp0_iter3_reg <= icmp_ln895_8_reg_885;
                icmp_ln895_8_reg_885_pp0_iter4_reg <= icmp_ln895_8_reg_885_pp0_iter3_reg;
                topval_0_V_20_reg_811_pp0_iter2_reg <= topval_0_V_20_reg_811;
                topval_0_V_20_reg_811_pp0_iter3_reg <= topval_0_V_20_reg_811_pp0_iter2_reg;
                topval_0_V_21_reg_821_pp0_iter2_reg <= topval_0_V_21_reg_821;
                topval_0_V_21_reg_821_pp0_iter3_reg <= topval_0_V_21_reg_821_pp0_iter2_reg;
                topval_0_V_22_reg_831_pp0_iter2_reg <= topval_0_V_22_reg_831;
                topval_0_V_22_reg_831_pp0_iter3_reg <= topval_0_V_22_reg_831_pp0_iter2_reg;
                topval_0_V_23_reg_841_pp0_iter2_reg <= topval_0_V_23_reg_841;
                topval_0_V_23_reg_841_pp0_iter3_reg <= topval_0_V_23_reg_841_pp0_iter2_reg;
                topval_0_V_23_reg_841_pp0_iter4_reg <= topval_0_V_23_reg_841_pp0_iter3_reg;
                topval_0_V_24_reg_851_pp0_iter2_reg <= topval_0_V_24_reg_851;
                topval_0_V_24_reg_851_pp0_iter3_reg <= topval_0_V_24_reg_851_pp0_iter2_reg;
                topval_0_V_24_reg_851_pp0_iter4_reg <= topval_0_V_24_reg_851_pp0_iter3_reg;
                topval_1_V_22_reg_937_pp0_iter4_reg <= topval_1_V_22_reg_937;
                topval_2_V_reg_892_pp0_iter3_reg <= topval_2_V_reg_892;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln374_reg_802_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln895_10_reg_943 <= icmp_ln895_10_fu_366_p2;
                icmp_ln895_14_reg_956 <= icmp_ln895_14_fu_376_p2;
                icmp_ln895_1_reg_906 <= icmp_ln895_1_fu_311_p2;
                icmp_ln895_4_reg_918 <= icmp_ln895_4_fu_330_p2;
                icmp_ln895_7_reg_930 <= icmp_ln895_7_fu_348_p2;
                topval_1_V_20_reg_913 <= topval_1_V_20_fu_322_p3;
                topval_1_V_21_reg_925 <= topval_1_V_21_fu_340_p3;
                topval_1_V_22_reg_937 <= topval_1_V_22_fu_358_p3;
                topval_2_V_11_reg_951 <= topval_2_V_11_fu_371_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln374_reg_802_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln895_11_reg_898 <= icmp_ln895_11_fu_306_p2;
                icmp_ln895_2_reg_861 <= icmp_ln895_2_fu_270_p2;
                icmp_ln895_5_reg_873 <= icmp_ln895_5_fu_282_p2;
                icmp_ln895_8_reg_885 <= icmp_ln895_8_fu_294_p2;
                topval_2_V_10_reg_880 <= topval_2_V_10_fu_287_p3;
                topval_2_V_9_reg_868 <= topval_2_V_9_fu_275_p3;
                topval_2_V_reg_892 <= topval_2_V_fu_299_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln374_reg_802_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln895_13_reg_999 <= icmp_ln895_13_fu_459_p2;
                icmp_ln895_3_reg_973 <= icmp_ln895_3_fu_407_p2;
                icmp_ln895_6_reg_978 <= icmp_ln895_6_fu_425_p2;
                icmp_ln895_9_reg_988 <= icmp_ln895_9_fu_443_p2;
                icmp_ln895_reg_968 <= icmp_ln895_fu_388_p2;
                topval_0_V_11_reg_983 <= topval_0_V_11_fu_435_p3;
                topval_1_V_23_reg_994 <= topval_1_V_23_fu_453_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((numReps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                numReps_read_reg_788 <= numReps_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                reps_reg_797 <= reps_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln374_reg_802_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                toplabels_0_V_10_fu_82 <= toplabels_0_V_19_fu_687_p3;
                toplabels_1_V_10_fu_86 <= toplabels_1_V_19_fu_710_p3;
                toplabels_2_V_12_fu_90 <= toplabels_2_V_23_fu_717_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln374_reg_802 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                topval_0_V_20_reg_811 <= topval_0_V_20_fu_226_p1;
                topval_0_V_21_reg_821 <= in_V_V_dout(31 downto 16);
                topval_0_V_22_reg_831 <= in_V_V_dout(47 downto 32);
                topval_0_V_23_reg_841 <= in_V_V_dout(63 downto 48);
                topval_0_V_24_reg_851 <= in_V_V_dout(79 downto 64);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_V_full_n, numReps_empty_n, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10, icmp_ln401_fu_739_p2, icmp_ln368_fu_203_p2, ap_CS_fsm_state2, icmp_ln374_fu_214_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((numReps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln368_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln374_fu_214_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((icmp_ln374_fu_214_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0))) and (icmp_ln401_fu_739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0))) and (icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln374_reg_802)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln374_reg_802 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln374_reg_802)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln374_reg_802 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, numReps_empty_n)
    begin
                ap_block_state1 <= ((numReps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_assign_proc : process(out_V_V_full_n, icmp_ln401_fu_739_p2)
    begin
                ap_block_state10 <= ((icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, icmp_ln374_reg_802)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln374_reg_802 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln374_fu_214_p2)
    begin
        if ((icmp_ln374_fu_214_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln368_fu_203_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln368_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_topval_0_V_phi_fu_140_p4_assign_proc : process(ap_block_pp0_stage0, topval_0_V_reg_136, icmp_ln374_reg_802_pp0_iter3_reg, topval_1_V_19_fu_469_p3, ap_enable_reg_pp0_iter4)
    begin
        if (((icmp_ln374_reg_802_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_topval_0_V_phi_fu_140_p4 <= topval_1_V_19_fu_469_p3;
        else 
            ap_phi_mux_topval_0_V_phi_fu_140_p4 <= topval_0_V_reg_136;
        end if; 
    end process;


    ap_phi_mux_topval_1_V_phi_fu_128_p4_assign_proc : process(ap_block_pp0_stage0, topval_1_V_reg_124, icmp_ln374_reg_802_pp0_iter2_reg, topval_2_V_8_fu_381_p3, ap_enable_reg_pp0_iter3)
    begin
        if (((icmp_ln374_reg_802_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_topval_1_V_phi_fu_128_p4 <= topval_2_V_8_fu_381_p3;
        else 
            ap_phi_mux_topval_1_V_phi_fu_128_p4 <= topval_1_V_reg_124;
        end if; 
    end process;


    ap_phi_mux_topval_V_0_0_i_phi_fu_152_p4_assign_proc : process(ap_block_pp0_stage0, topval_V_0_0_i_reg_148, icmp_ln374_reg_802_pp0_iter4_reg, ap_enable_reg_pp0_iter5, topval_0_V_19_fu_695_p3)
    begin
        if (((icmp_ln374_reg_802_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_phi_mux_topval_V_0_0_i_phi_fu_152_p4 <= topval_0_V_19_fu_695_p3;
        else 
            ap_phi_mux_topval_V_0_0_i_phi_fu_152_p4 <= topval_V_0_0_i_reg_148;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln368_fu_203_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln368_fu_203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    block_fu_220_p2 <= std_logic_vector(unsigned(block_0_i_reg_172) + unsigned(ap_const_lv2_1));
    icmp_ln368_fu_203_p2 <= "1" when (reps_0_i_reg_113 = numReps_read_reg_788) else "0";
    icmp_ln374_fu_214_p2 <= "1" when (block_0_i_reg_172 = ap_const_lv2_2) else "0";
    icmp_ln401_fu_739_p2 <= "1" when (topx3_0_i_reg_183 = ap_const_lv2_3) else "0";
    icmp_ln895_10_fu_366_p2 <= "1" when (signed(topval_0_V_23_reg_841_pp0_iter2_reg) > signed(topval_1_V_22_fu_358_p3)) else "0";
    icmp_ln895_11_fu_306_p2 <= "1" when (signed(topval_0_V_23_reg_841) > signed(topval_2_V_fu_299_p3)) else "0";
    icmp_ln895_12_fu_670_p2 <= "1" when (signed(topval_0_V_24_reg_851_pp0_iter4_reg) > signed(topval_0_V_15_fu_637_p3)) else "0";
    icmp_ln895_13_fu_459_p2 <= "1" when (signed(topval_0_V_24_reg_851_pp0_iter3_reg) > signed(topval_1_V_23_fu_453_p3)) else "0";
    icmp_ln895_14_fu_376_p2 <= "1" when (signed(topval_0_V_24_reg_851_pp0_iter2_reg) > signed(topval_2_V_11_fu_371_p3)) else "0";
    icmp_ln895_1_fu_311_p2 <= "1" when (signed(topval_0_V_20_reg_811_pp0_iter2_reg) > signed(ap_phi_mux_topval_0_V_phi_fu_140_p4)) else "0";
    icmp_ln895_2_fu_270_p2 <= "1" when (signed(topval_0_V_20_reg_811) > signed(ap_phi_mux_topval_1_V_phi_fu_128_p4)) else "0";
    icmp_ln895_3_fu_407_p2 <= "1" when (signed(topval_0_V_21_reg_821_pp0_iter3_reg) > signed(topval_0_V_3_fu_399_p3)) else "0";
    icmp_ln895_4_fu_330_p2 <= "1" when (signed(topval_0_V_21_reg_821_pp0_iter2_reg) > signed(topval_1_V_20_fu_322_p3)) else "0";
    icmp_ln895_5_fu_282_p2 <= "1" when (signed(topval_0_V_21_reg_821) > signed(topval_2_V_9_fu_275_p3)) else "0";
    icmp_ln895_6_fu_425_p2 <= "1" when (signed(topval_0_V_22_reg_831_pp0_iter3_reg) > signed(topval_0_V_7_fu_417_p3)) else "0";
    icmp_ln895_7_fu_348_p2 <= "1" when (signed(topval_0_V_22_reg_831_pp0_iter2_reg) > signed(topval_1_V_21_fu_340_p3)) else "0";
    icmp_ln895_8_fu_294_p2 <= "1" when (signed(topval_0_V_22_reg_831) > signed(topval_2_V_10_fu_287_p3)) else "0";
    icmp_ln895_9_fu_443_p2 <= "1" when (signed(topval_0_V_23_reg_841_pp0_iter3_reg) > signed(topval_0_V_11_fu_435_p3)) else "0";
    icmp_ln895_fu_388_p2 <= "1" when (signed(topval_0_V_20_reg_811_pp0_iter3_reg) > signed(ap_phi_mux_topval_V_0_0_i_phi_fu_152_p4)) else "0";
    idx_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv4_5) + unsigned(toplabels_2_V_reg_160));

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln374_reg_802)
    begin
        if (((icmp_ln374_reg_802 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln374_reg_802, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln374_reg_802 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    numReps_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numReps_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numReps_blk_n <= numReps_empty_n;
        else 
            numReps_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    numReps_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numReps_empty_n)
    begin
        if ((not(((numReps_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numReps_read <= ap_const_logic_1;
        else 
            numReps_read <= ap_const_logic_0;
        end if; 
    end process;


    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state10, icmp_ln401_fu_739_p2)
    begin
        if (((icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= tmp_V_fu_757_p5;

    out_V_V_write_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state10, icmp_ln401_fu_739_p2)
    begin
        if ((not(((icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0))) and (icmp_ln401_fu_739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    reps_fu_208_p2 <= std_logic_vector(unsigned(reps_0_i_reg_113) + unsigned(ap_const_lv32_1));
    tmp_V_fu_757_p4 <= std_logic_vector(signed(ap_const_lv2_2) - signed(topx3_0_i_reg_183));
    toplabels_0_V_11_fu_494_p3 <= 
        toplabels_0_V_fu_487_p3 when (icmp_ln895_reg_968(0) = '1') else 
        toplabels_0_V_10_fu_82;
    toplabels_0_V_12_fu_532_p3 <= 
        toplabels_1_V_11_fu_508_p3 when (icmp_ln895_4_reg_918_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_15_fu_528_p1;
    toplabels_0_V_13_fu_539_p3 <= 
        toplabels_0_V_12_fu_532_p3 when (icmp_ln895_3_reg_973(0) = '1') else 
        toplabels_0_V_11_fu_494_p3;
    toplabels_0_V_14_fu_577_p3 <= 
        toplabels_1_V_13_fu_553_p3 when (icmp_ln895_7_reg_930_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_18_fu_573_p1;
    toplabels_0_V_15_fu_584_p3 <= 
        toplabels_0_V_14_fu_577_p3 when (icmp_ln895_6_reg_978(0) = '1') else 
        toplabels_0_V_13_fu_539_p3;
    toplabels_0_V_16_fu_623_p3 <= 
        toplabels_1_V_15_fu_598_p3 when (icmp_ln895_10_reg_943_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_20_fu_612_p2;
    toplabels_0_V_17_fu_630_p3 <= 
        toplabels_0_V_16_fu_623_p3 when (icmp_ln895_9_reg_988(0) = '1') else 
        toplabels_0_V_15_fu_584_p3;
    toplabels_0_V_18_fu_680_p3 <= 
        toplabels_1_V_17_fu_650_p3 when (icmp_ln895_13_reg_999(0) = '1') else 
        toplabels_2_V_22_fu_664_p2;
    toplabels_0_V_19_fu_687_p3 <= 
        toplabels_0_V_18_fu_680_p3 when (icmp_ln895_12_fu_670_p2(0) = '1') else 
        toplabels_0_V_17_fu_630_p3;
    toplabels_0_V_fu_487_p3 <= 
        toplabels_1_V_10_fu_86 when (icmp_ln895_1_reg_906_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_reg_160;
    toplabels_1_V_11_fu_508_p3 <= 
        toplabels_1_V_fu_501_p3 when (icmp_ln895_1_reg_906_pp0_iter4_reg(0) = '1') else 
        toplabels_1_V_10_fu_86;
    toplabels_1_V_12_fu_546_p3 <= 
        toplabels_2_V_13_fu_515_p3 when (icmp_ln895_5_reg_873_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_15_fu_528_p1;
    toplabels_1_V_13_fu_553_p3 <= 
        toplabels_1_V_12_fu_546_p3 when (icmp_ln895_4_reg_918_pp0_iter4_reg(0) = '1') else 
        toplabels_1_V_11_fu_508_p3;
    toplabels_1_V_14_fu_591_p3 <= 
        toplabels_2_V_16_fu_560_p3 when (icmp_ln895_8_reg_885_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_18_fu_573_p1;
    toplabels_1_V_15_fu_598_p3 <= 
        toplabels_1_V_14_fu_591_p3 when (icmp_ln895_7_reg_930_pp0_iter4_reg(0) = '1') else 
        toplabels_1_V_13_fu_553_p3;
    toplabels_1_V_16_fu_643_p3 <= 
        toplabels_2_V_19_fu_605_p3 when (icmp_ln895_11_reg_898_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_20_fu_612_p2;
    toplabels_1_V_17_fu_650_p3 <= 
        toplabels_1_V_16_fu_643_p3 when (icmp_ln895_10_reg_943_pp0_iter4_reg(0) = '1') else 
        toplabels_1_V_15_fu_598_p3;
    toplabels_1_V_18_fu_703_p3 <= 
        toplabels_2_V_21_fu_657_p3 when (icmp_ln895_14_reg_956_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_22_fu_664_p2;
    toplabels_1_V_19_fu_710_p3 <= 
        toplabels_1_V_18_fu_703_p3 when (icmp_ln895_13_reg_999(0) = '1') else 
        toplabels_1_V_17_fu_650_p3;
    toplabels_1_V_fu_501_p3 <= 
        toplabels_2_V_12_fu_90 when (icmp_ln895_2_reg_861_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_reg_160;
    toplabels_2_V_13_fu_515_p3 <= 
        toplabels_2_V_reg_160 when (icmp_ln895_2_reg_861_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_12_fu_90;
    toplabels_2_V_14_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(trunc_ln895_fu_483_p1));
    toplabels_2_V_15_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(toplabels_2_V_14_fu_522_p2),4));
    toplabels_2_V_16_fu_560_p3 <= 
        toplabels_2_V_15_fu_528_p1 when (icmp_ln895_5_reg_873_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_13_fu_515_p3;
    toplabels_2_V_17_fu_567_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(trunc_ln895_fu_483_p1));
    toplabels_2_V_18_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(toplabels_2_V_17_fu_567_p2),4));
    toplabels_2_V_19_fu_605_p3 <= 
        toplabels_2_V_18_fu_573_p1 when (icmp_ln895_8_reg_885_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_16_fu_560_p3;
    toplabels_2_V_20_fu_612_p2 <= std_logic_vector(unsigned(ap_const_lv4_3) + unsigned(toplabels_2_V_reg_160));
    toplabels_2_V_21_fu_657_p3 <= 
        toplabels_2_V_20_fu_612_p2 when (icmp_ln895_11_reg_898_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_19_fu_605_p3;
    toplabels_2_V_22_fu_664_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(toplabels_2_V_reg_160));
    toplabels_2_V_23_fu_717_p3 <= 
        toplabels_2_V_22_fu_664_p2 when (icmp_ln895_14_reg_956_pp0_iter4_reg(0) = '1') else 
        toplabels_2_V_21_fu_657_p3;
    topval_0_V_10_fu_430_p3 <= 
        topval_1_V_21_reg_925 when (icmp_ln895_7_reg_930(0) = '1') else 
        topval_0_V_22_reg_831_pp0_iter3_reg;
    topval_0_V_11_fu_435_p3 <= 
        topval_0_V_10_fu_430_p3 when (icmp_ln895_6_fu_425_p2(0) = '1') else 
        topval_0_V_7_fu_417_p3;
    topval_0_V_14_fu_618_p3 <= 
        topval_1_V_22_reg_937_pp0_iter4_reg when (icmp_ln895_10_reg_943_pp0_iter4_reg(0) = '1') else 
        topval_0_V_23_reg_841_pp0_iter4_reg;
    topval_0_V_15_fu_637_p3 <= 
        topval_0_V_14_fu_618_p3 when (icmp_ln895_9_reg_988(0) = '1') else 
        topval_0_V_11_reg_983;
    topval_0_V_18_fu_675_p3 <= 
        topval_1_V_23_reg_994 when (icmp_ln895_13_reg_999(0) = '1') else 
        topval_0_V_24_reg_851_pp0_iter4_reg;
    topval_0_V_19_fu_695_p3 <= 
        topval_0_V_18_fu_675_p3 when (icmp_ln895_12_fu_670_p2(0) = '1') else 
        topval_0_V_15_fu_637_p3;
    topval_0_V_20_fu_226_p1 <= in_V_V_dout(16 - 1 downto 0);
    topval_0_V_2_fu_393_p3 <= 
        topval_0_V_reg_136 when (icmp_ln895_1_reg_906(0) = '1') else 
        topval_0_V_20_reg_811_pp0_iter3_reg;
    topval_0_V_3_fu_399_p3 <= 
        topval_0_V_2_fu_393_p3 when (icmp_ln895_fu_388_p2(0) = '1') else 
        ap_phi_mux_topval_V_0_0_i_phi_fu_152_p4;
    topval_0_V_6_fu_412_p3 <= 
        topval_1_V_20_reg_913 when (icmp_ln895_4_reg_918(0) = '1') else 
        topval_0_V_21_reg_821_pp0_iter3_reg;
    topval_0_V_7_fu_417_p3 <= 
        topval_0_V_6_fu_412_p3 when (icmp_ln895_3_fu_407_p2(0) = '1') else 
        topval_0_V_3_fu_399_p3;
    topval_1_V_10_fu_353_p3 <= 
        topval_2_V_10_reg_880 when (icmp_ln895_8_reg_885(0) = '1') else 
        topval_0_V_22_reg_831_pp0_iter2_reg;
    topval_1_V_14_fu_448_p3 <= 
        topval_2_V_reg_892_pp0_iter3_reg when (icmp_ln895_11_reg_898_pp0_iter3_reg(0) = '1') else 
        topval_0_V_23_reg_841_pp0_iter3_reg;
    topval_1_V_18_fu_464_p3 <= 
        topval_2_V_11_reg_951 when (icmp_ln895_14_reg_956(0) = '1') else 
        topval_0_V_24_reg_851_pp0_iter3_reg;
    topval_1_V_19_fu_469_p3 <= 
        topval_1_V_18_fu_464_p3 when (icmp_ln895_13_fu_459_p2(0) = '1') else 
        topval_1_V_23_fu_453_p3;
    topval_1_V_20_fu_322_p3 <= 
        topval_1_V_2_fu_316_p3 when (icmp_ln895_1_fu_311_p2(0) = '1') else 
        ap_phi_mux_topval_0_V_phi_fu_140_p4;
    topval_1_V_21_fu_340_p3 <= 
        topval_1_V_6_fu_335_p3 when (icmp_ln895_4_fu_330_p2(0) = '1') else 
        topval_1_V_20_fu_322_p3;
    topval_1_V_22_fu_358_p3 <= 
        topval_1_V_10_fu_353_p3 when (icmp_ln895_7_fu_348_p2(0) = '1') else 
        topval_1_V_21_fu_340_p3;
    topval_1_V_23_fu_453_p3 <= 
        topval_1_V_14_fu_448_p3 when (icmp_ln895_10_reg_943(0) = '1') else 
        topval_1_V_22_reg_937;
    topval_1_V_2_fu_316_p3 <= 
        topval_1_V_reg_124 when (icmp_ln895_2_reg_861(0) = '1') else 
        topval_0_V_20_reg_811_pp0_iter2_reg;
    topval_1_V_6_fu_335_p3 <= 
        topval_2_V_9_reg_868 when (icmp_ln895_5_reg_873(0) = '1') else 
        topval_0_V_21_reg_821_pp0_iter2_reg;
    topval_2_V_10_fu_287_p3 <= 
        topval_0_V_21_reg_821 when (icmp_ln895_5_fu_282_p2(0) = '1') else 
        topval_2_V_9_fu_275_p3;
    topval_2_V_11_fu_371_p3 <= 
        topval_0_V_23_reg_841_pp0_iter2_reg when (icmp_ln895_11_reg_898(0) = '1') else 
        topval_2_V_reg_892;
    topval_2_V_8_fu_381_p3 <= 
        topval_0_V_24_reg_851_pp0_iter2_reg when (icmp_ln895_14_fu_376_p2(0) = '1') else 
        topval_2_V_11_fu_371_p3;
    topval_2_V_9_fu_275_p3 <= 
        topval_0_V_20_reg_811 when (icmp_ln895_2_fu_270_p2(0) = '1') else 
        ap_phi_mux_topval_1_V_phi_fu_128_p4;
    topval_2_V_fu_299_p3 <= 
        topval_0_V_22_reg_831 when (icmp_ln895_8_fu_294_p2(0) = '1') else 
        topval_2_V_10_fu_287_p3;
    topx_fu_745_p2 <= std_logic_vector(unsigned(topx3_0_i_reg_183) + unsigned(ap_const_lv2_1));
    trunc_ln895_fu_483_p1 <= toplabels_2_V_reg_160(3 - 1 downto 0);
end behav;
