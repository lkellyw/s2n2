// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv1_lif_top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic conv1_lif_top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> conv1_lif_top::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic conv1_lif_top::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<2> conv1_lif_top::ap_const_lv2_0 = "00";
const sc_lv<2> conv1_lif_top::ap_const_lv2_1 = "1";
const bool conv1_lif_top::ap_const_boolean_1 = true;

conv1_lif_top::conv1_lif_top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    conv1_lif_top_entry3_U0 = new conv1_lif_top_entry3("conv1_lif_top_entry3_U0");
    conv1_lif_top_entry3_U0->ap_clk(ap_clk);
    conv1_lif_top_entry3_U0->ap_rst(ap_rst);
    conv1_lif_top_entry3_U0->ap_start(conv1_lif_top_entry3_U0_ap_start);
    conv1_lif_top_entry3_U0->start_full_n(start_for_Block_ZN8ap_fixedIL_U0_full_n);
    conv1_lif_top_entry3_U0->ap_done(conv1_lif_top_entry3_U0_ap_done);
    conv1_lif_top_entry3_U0->ap_continue(conv1_lif_top_entry3_U0_ap_continue);
    conv1_lif_top_entry3_U0->ap_idle(conv1_lif_top_entry3_U0_ap_idle);
    conv1_lif_top_entry3_U0->ap_ready(conv1_lif_top_entry3_U0_ap_ready);
    conv1_lif_top_entry3_U0->start_out(conv1_lif_top_entry3_U0_start_out);
    conv1_lif_top_entry3_U0->start_write(conv1_lif_top_entry3_U0_start_write);
    conv1_lif_top_entry3_U0->numReps(numReps);
    conv1_lif_top_entry3_U0->numReps_out_din(conv1_lif_top_entry3_U0_numReps_out_din);
    conv1_lif_top_entry3_U0->numReps_out_full_n(numReps_c_full_n);
    conv1_lif_top_entry3_U0->numReps_out_write(conv1_lif_top_entry3_U0_numReps_out_write);
    conv1_lif_top_entry3_U0->numReps_out1_din(conv1_lif_top_entry3_U0_numReps_out1_din);
    conv1_lif_top_entry3_U0->numReps_out1_full_n(numReps_c8_full_n);
    conv1_lif_top_entry3_U0->numReps_out1_write(conv1_lif_top_entry3_U0_numReps_out1_write);
    ConvolutionInputGene_U0 = new ConvolutionInputGene("ConvolutionInputGene_U0");
    ConvolutionInputGene_U0->ap_clk(ap_clk);
    ConvolutionInputGene_U0->ap_rst(ap_rst);
    ConvolutionInputGene_U0->ap_start(ConvolutionInputGene_U0_ap_start);
    ConvolutionInputGene_U0->ap_done(ConvolutionInputGene_U0_ap_done);
    ConvolutionInputGene_U0->ap_continue(ConvolutionInputGene_U0_ap_continue);
    ConvolutionInputGene_U0->ap_idle(ConvolutionInputGene_U0_ap_idle);
    ConvolutionInputGene_U0->ap_ready(ConvolutionInputGene_U0_ap_ready);
    ConvolutionInputGene_U0->in_V_V_dout(in_V_V_dout);
    ConvolutionInputGene_U0->in_V_V_empty_n(in_V_V_empty_n);
    ConvolutionInputGene_U0->in_V_V_read(ConvolutionInputGene_U0_in_V_V_read);
    ConvolutionInputGene_U0->out_V_V_din(ConvolutionInputGene_U0_out_V_V_din);
    ConvolutionInputGene_U0->out_V_V_full_n(convInp_V_V_full_n);
    ConvolutionInputGene_U0->out_V_V_write(ConvolutionInputGene_U0_out_V_V_write);
    ConvolutionInputGene_U0->numReps_dout(numReps_c_dout);
    ConvolutionInputGene_U0->numReps_empty_n(numReps_c_empty_n);
    ConvolutionInputGene_U0->numReps_read(ConvolutionInputGene_U0_numReps_read);
    Block_ZN8ap_fixedIL_U0 = new Block_ZN8ap_fixedIL("Block_ZN8ap_fixedIL_U0");
    Block_ZN8ap_fixedIL_U0->ap_clk(ap_clk);
    Block_ZN8ap_fixedIL_U0->ap_rst(ap_rst);
    Block_ZN8ap_fixedIL_U0->ap_start(Block_ZN8ap_fixedIL_U0_ap_start);
    Block_ZN8ap_fixedIL_U0->ap_done(Block_ZN8ap_fixedIL_U0_ap_done);
    Block_ZN8ap_fixedIL_U0->ap_continue(Block_ZN8ap_fixedIL_U0_ap_continue);
    Block_ZN8ap_fixedIL_U0->ap_idle(Block_ZN8ap_fixedIL_U0_ap_idle);
    Block_ZN8ap_fixedIL_U0->ap_ready(Block_ZN8ap_fixedIL_U0_ap_ready);
    Block_ZN8ap_fixedIL_U0->numReps_dout(numReps_c8_dout);
    Block_ZN8ap_fixedIL_U0->numReps_empty_n(numReps_c8_empty_n);
    Block_ZN8ap_fixedIL_U0->numReps_read(Block_ZN8ap_fixedIL_U0_numReps_read);
    Block_ZN8ap_fixedIL_U0->ap_return(Block_ZN8ap_fixedIL_U0_ap_return);
    Matrix_Vector_Activa_U0 = new Matrix_Vector_Activa("Matrix_Vector_Activa_U0");
    Matrix_Vector_Activa_U0->ap_clk(ap_clk);
    Matrix_Vector_Activa_U0->ap_rst(ap_rst);
    Matrix_Vector_Activa_U0->ap_start(Matrix_Vector_Activa_U0_ap_start);
    Matrix_Vector_Activa_U0->ap_done(Matrix_Vector_Activa_U0_ap_done);
    Matrix_Vector_Activa_U0->ap_continue(Matrix_Vector_Activa_U0_ap_continue);
    Matrix_Vector_Activa_U0->ap_idle(Matrix_Vector_Activa_U0_ap_idle);
    Matrix_Vector_Activa_U0->ap_ready(Matrix_Vector_Activa_U0_ap_ready);
    Matrix_Vector_Activa_U0->in_V_V_dout(convInp_V_V_dout);
    Matrix_Vector_Activa_U0->in_V_V_empty_n(convInp_V_V_empty_n);
    Matrix_Vector_Activa_U0->in_V_V_read(Matrix_Vector_Activa_U0_in_V_V_read);
    Matrix_Vector_Activa_U0->out_V_V_din(Matrix_Vector_Activa_U0_out_V_V_din);
    Matrix_Vector_Activa_U0->out_V_V_full_n(out_V_V_full_n);
    Matrix_Vector_Activa_U0->out_V_V_write(Matrix_Vector_Activa_U0_out_V_V_write);
    Matrix_Vector_Activa_U0->reps(mul_ln124_loc_channe_dout);
    numReps_c_U = new fifo_w32_d2_A("numReps_c_U");
    numReps_c_U->clk(ap_clk);
    numReps_c_U->reset(ap_rst);
    numReps_c_U->if_read_ce(ap_var_for_const0);
    numReps_c_U->if_write_ce(ap_var_for_const0);
    numReps_c_U->if_din(conv1_lif_top_entry3_U0_numReps_out_din);
    numReps_c_U->if_full_n(numReps_c_full_n);
    numReps_c_U->if_write(conv1_lif_top_entry3_U0_numReps_out_write);
    numReps_c_U->if_dout(numReps_c_dout);
    numReps_c_U->if_empty_n(numReps_c_empty_n);
    numReps_c_U->if_read(ConvolutionInputGene_U0_numReps_read);
    numReps_c8_U = new fifo_w32_d2_A("numReps_c8_U");
    numReps_c8_U->clk(ap_clk);
    numReps_c8_U->reset(ap_rst);
    numReps_c8_U->if_read_ce(ap_var_for_const0);
    numReps_c8_U->if_write_ce(ap_var_for_const0);
    numReps_c8_U->if_din(conv1_lif_top_entry3_U0_numReps_out1_din);
    numReps_c8_U->if_full_n(numReps_c8_full_n);
    numReps_c8_U->if_write(conv1_lif_top_entry3_U0_numReps_out1_write);
    numReps_c8_U->if_dout(numReps_c8_dout);
    numReps_c8_U->if_empty_n(numReps_c8_empty_n);
    numReps_c8_U->if_read(Block_ZN8ap_fixedIL_U0_numReps_read);
    convInp_V_V_U = new fifo_w3_d2_A("convInp_V_V_U");
    convInp_V_V_U->clk(ap_clk);
    convInp_V_V_U->reset(ap_rst);
    convInp_V_V_U->if_read_ce(ap_var_for_const0);
    convInp_V_V_U->if_write_ce(ap_var_for_const0);
    convInp_V_V_U->if_din(ConvolutionInputGene_U0_out_V_V_din);
    convInp_V_V_U->if_full_n(convInp_V_V_full_n);
    convInp_V_V_U->if_write(ConvolutionInputGene_U0_out_V_V_write);
    convInp_V_V_U->if_dout(convInp_V_V_dout);
    convInp_V_V_U->if_empty_n(convInp_V_V_empty_n);
    convInp_V_V_U->if_read(Matrix_Vector_Activa_U0_in_V_V_read);
    mul_ln124_loc_channe_U = new fifo_w32_d2_A("mul_ln124_loc_channe_U");
    mul_ln124_loc_channe_U->clk(ap_clk);
    mul_ln124_loc_channe_U->reset(ap_rst);
    mul_ln124_loc_channe_U->if_read_ce(ap_var_for_const0);
    mul_ln124_loc_channe_U->if_write_ce(ap_var_for_const0);
    mul_ln124_loc_channe_U->if_din(Block_ZN8ap_fixedIL_U0_ap_return);
    mul_ln124_loc_channe_U->if_full_n(mul_ln124_loc_channe_full_n);
    mul_ln124_loc_channe_U->if_write(Block_ZN8ap_fixedIL_U0_ap_done);
    mul_ln124_loc_channe_U->if_dout(mul_ln124_loc_channe_dout);
    mul_ln124_loc_channe_U->if_empty_n(mul_ln124_loc_channe_empty_n);
    mul_ln124_loc_channe_U->if_read(Matrix_Vector_Activa_U0_ap_ready);
    start_for_Block_ZJfO_U = new start_for_Block_ZJfO("start_for_Block_ZJfO_U");
    start_for_Block_ZJfO_U->clk(ap_clk);
    start_for_Block_ZJfO_U->reset(ap_rst);
    start_for_Block_ZJfO_U->if_read_ce(ap_var_for_const0);
    start_for_Block_ZJfO_U->if_write_ce(ap_var_for_const0);
    start_for_Block_ZJfO_U->if_din(start_for_Block_ZN8ap_fixedIL_U0_din);
    start_for_Block_ZJfO_U->if_full_n(start_for_Block_ZN8ap_fixedIL_U0_full_n);
    start_for_Block_ZJfO_U->if_write(conv1_lif_top_entry3_U0_start_write);
    start_for_Block_ZJfO_U->if_dout(start_for_Block_ZN8ap_fixedIL_U0_dout);
    start_for_Block_ZJfO_U->if_empty_n(start_for_Block_ZN8ap_fixedIL_U0_empty_n);
    start_for_Block_ZJfO_U->if_read(Block_ZN8ap_fixedIL_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Block_ZN8ap_fixedIL_U0_ap_continue);
    sensitive << ( mul_ln124_loc_channe_full_n );

    SC_METHOD(thread_Block_ZN8ap_fixedIL_U0_ap_start);
    sensitive << ( start_for_Block_ZN8ap_fixedIL_U0_empty_n );

    SC_METHOD(thread_Block_ZN8ap_fixedIL_U0_start_full_n);

    SC_METHOD(thread_Block_ZN8ap_fixedIL_U0_start_write);

    SC_METHOD(thread_ConvolutionInputGene_U0_ap_continue);

    SC_METHOD(thread_ConvolutionInputGene_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_ConvolutionInputGene_U0_ap_ready );

    SC_METHOD(thread_ConvolutionInputGene_U0_start_full_n);

    SC_METHOD(thread_ConvolutionInputGene_U0_start_write);

    SC_METHOD(thread_Matrix_Vector_Activa_U0_ap_continue);

    SC_METHOD(thread_Matrix_Vector_Activa_U0_ap_start);
    sensitive << ( mul_ln124_loc_channe_empty_n );

    SC_METHOD(thread_Matrix_Vector_Activa_U0_start_full_n);

    SC_METHOD(thread_Matrix_Vector_Activa_U0_start_write);

    SC_METHOD(thread_ap_channel_done_mul_ln124_loc_channe);
    sensitive << ( Block_ZN8ap_fixedIL_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( Matrix_Vector_Activa_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( conv1_lif_top_entry3_U0_ap_idle );
    sensitive << ( ConvolutionInputGene_U0_ap_idle );
    sensitive << ( Block_ZN8ap_fixedIL_U0_ap_idle );
    sensitive << ( Matrix_Vector_Activa_U0_ap_idle );
    sensitive << ( mul_ln124_loc_channe_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sync_ready );

    SC_METHOD(thread_ap_sync_ConvolutionInputGene_U0_ap_ready);
    sensitive << ( ConvolutionInputGene_U0_ap_ready );
    sensitive << ( ap_sync_reg_ConvolutionInputGene_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_conv1_lif_top_entry3_U0_ap_ready);
    sensitive << ( conv1_lif_top_entry3_U0_ap_ready );
    sensitive << ( ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Matrix_Vector_Activa_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( ap_sync_conv1_lif_top_entry3_U0_ap_ready );
    sensitive << ( ap_sync_ConvolutionInputGene_U0_ap_ready );

    SC_METHOD(thread_conv1_lif_top_entry3_U0_ap_continue);

    SC_METHOD(thread_conv1_lif_top_entry3_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready );

    SC_METHOD(thread_in_V_V_read);
    sensitive << ( ConvolutionInputGene_U0_in_V_V_read );

    SC_METHOD(thread_out_V_V_din);
    sensitive << ( Matrix_Vector_Activa_U0_out_V_V_din );

    SC_METHOD(thread_out_V_V_write);
    sensitive << ( Matrix_Vector_Activa_U0_out_V_V_write );

    SC_METHOD(thread_start_for_Block_ZN8ap_fixedIL_U0_din);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready = SC_LOGIC_0;
    conv1_lif_top_entry3_U0_ap_ready_count = "00";
    ap_sync_reg_ConvolutionInputGene_U0_ap_ready = SC_LOGIC_0;
    ConvolutionInputGene_U0_ap_ready_count = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv1_lif_top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, in_V_V_dout, "(port)in_V_V_dout");
    sc_trace(mVcdFile, in_V_V_empty_n, "(port)in_V_V_empty_n");
    sc_trace(mVcdFile, in_V_V_read, "(port)in_V_V_read");
    sc_trace(mVcdFile, out_V_V_din, "(port)out_V_V_din");
    sc_trace(mVcdFile, out_V_V_full_n, "(port)out_V_V_full_n");
    sc_trace(mVcdFile, out_V_V_write, "(port)out_V_V_write");
    sc_trace(mVcdFile, numReps, "(port)numReps");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_ap_start, "conv1_lif_top_entry3_U0_ap_start");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_ap_done, "conv1_lif_top_entry3_U0_ap_done");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_ap_continue, "conv1_lif_top_entry3_U0_ap_continue");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_ap_idle, "conv1_lif_top_entry3_U0_ap_idle");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_ap_ready, "conv1_lif_top_entry3_U0_ap_ready");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_start_out, "conv1_lif_top_entry3_U0_start_out");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_start_write, "conv1_lif_top_entry3_U0_start_write");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_numReps_out_din, "conv1_lif_top_entry3_U0_numReps_out_din");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_numReps_out_write, "conv1_lif_top_entry3_U0_numReps_out_write");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_numReps_out1_din, "conv1_lif_top_entry3_U0_numReps_out1_din");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_numReps_out1_write, "conv1_lif_top_entry3_U0_numReps_out1_write");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_ap_start, "ConvolutionInputGene_U0_ap_start");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_ap_done, "ConvolutionInputGene_U0_ap_done");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_ap_continue, "ConvolutionInputGene_U0_ap_continue");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_ap_idle, "ConvolutionInputGene_U0_ap_idle");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_ap_ready, "ConvolutionInputGene_U0_ap_ready");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_in_V_V_read, "ConvolutionInputGene_U0_in_V_V_read");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_out_V_V_din, "ConvolutionInputGene_U0_out_V_V_din");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_out_V_V_write, "ConvolutionInputGene_U0_out_V_V_write");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_numReps_read, "ConvolutionInputGene_U0_numReps_read");
    sc_trace(mVcdFile, Block_ZN8ap_fixedIL_U0_ap_start, "Block_ZN8ap_fixedIL_U0_ap_start");
    sc_trace(mVcdFile, Block_ZN8ap_fixedIL_U0_ap_done, "Block_ZN8ap_fixedIL_U0_ap_done");
    sc_trace(mVcdFile, Block_ZN8ap_fixedIL_U0_ap_continue, "Block_ZN8ap_fixedIL_U0_ap_continue");
    sc_trace(mVcdFile, Block_ZN8ap_fixedIL_U0_ap_idle, "Block_ZN8ap_fixedIL_U0_ap_idle");
    sc_trace(mVcdFile, Block_ZN8ap_fixedIL_U0_ap_ready, "Block_ZN8ap_fixedIL_U0_ap_ready");
    sc_trace(mVcdFile, Block_ZN8ap_fixedIL_U0_numReps_read, "Block_ZN8ap_fixedIL_U0_numReps_read");
    sc_trace(mVcdFile, Block_ZN8ap_fixedIL_U0_ap_return, "Block_ZN8ap_fixedIL_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_mul_ln124_loc_channe, "ap_channel_done_mul_ln124_loc_channe");
    sc_trace(mVcdFile, mul_ln124_loc_channe_full_n, "mul_ln124_loc_channe_full_n");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_ap_start, "Matrix_Vector_Activa_U0_ap_start");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_ap_done, "Matrix_Vector_Activa_U0_ap_done");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_ap_continue, "Matrix_Vector_Activa_U0_ap_continue");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_ap_idle, "Matrix_Vector_Activa_U0_ap_idle");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_ap_ready, "Matrix_Vector_Activa_U0_ap_ready");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_in_V_V_read, "Matrix_Vector_Activa_U0_in_V_V_read");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_out_V_V_din, "Matrix_Vector_Activa_U0_out_V_V_din");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_out_V_V_write, "Matrix_Vector_Activa_U0_out_V_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, numReps_c_full_n, "numReps_c_full_n");
    sc_trace(mVcdFile, numReps_c_dout, "numReps_c_dout");
    sc_trace(mVcdFile, numReps_c_empty_n, "numReps_c_empty_n");
    sc_trace(mVcdFile, numReps_c8_full_n, "numReps_c8_full_n");
    sc_trace(mVcdFile, numReps_c8_dout, "numReps_c8_dout");
    sc_trace(mVcdFile, numReps_c8_empty_n, "numReps_c8_empty_n");
    sc_trace(mVcdFile, convInp_V_V_full_n, "convInp_V_V_full_n");
    sc_trace(mVcdFile, convInp_V_V_dout, "convInp_V_V_dout");
    sc_trace(mVcdFile, convInp_V_V_empty_n, "convInp_V_V_empty_n");
    sc_trace(mVcdFile, mul_ln124_loc_channe_dout, "mul_ln124_loc_channe_dout");
    sc_trace(mVcdFile, mul_ln124_loc_channe_empty_n, "mul_ln124_loc_channe_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready, "ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_conv1_lif_top_entry3_U0_ap_ready, "ap_sync_conv1_lif_top_entry3_U0_ap_ready");
    sc_trace(mVcdFile, conv1_lif_top_entry3_U0_ap_ready_count, "conv1_lif_top_entry3_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_ConvolutionInputGene_U0_ap_ready, "ap_sync_reg_ConvolutionInputGene_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_ConvolutionInputGene_U0_ap_ready, "ap_sync_ConvolutionInputGene_U0_ap_ready");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_ap_ready_count, "ConvolutionInputGene_U0_ap_ready_count");
    sc_trace(mVcdFile, start_for_Block_ZN8ap_fixedIL_U0_din, "start_for_Block_ZN8ap_fixedIL_U0_din");
    sc_trace(mVcdFile, start_for_Block_ZN8ap_fixedIL_U0_full_n, "start_for_Block_ZN8ap_fixedIL_U0_full_n");
    sc_trace(mVcdFile, start_for_Block_ZN8ap_fixedIL_U0_dout, "start_for_Block_ZN8ap_fixedIL_U0_dout");
    sc_trace(mVcdFile, start_for_Block_ZN8ap_fixedIL_U0_empty_n, "start_for_Block_ZN8ap_fixedIL_U0_empty_n");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_start_full_n, "ConvolutionInputGene_U0_start_full_n");
    sc_trace(mVcdFile, ConvolutionInputGene_U0_start_write, "ConvolutionInputGene_U0_start_write");
    sc_trace(mVcdFile, Block_ZN8ap_fixedIL_U0_start_full_n, "Block_ZN8ap_fixedIL_U0_start_full_n");
    sc_trace(mVcdFile, Block_ZN8ap_fixedIL_U0_start_write, "Block_ZN8ap_fixedIL_U0_start_write");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_start_full_n, "Matrix_Vector_Activa_U0_start_full_n");
    sc_trace(mVcdFile, Matrix_Vector_Activa_U0_start_write, "Matrix_Vector_Activa_U0_start_write");
#endif

    }
    mHdltvinHandle.open("conv1_lif_top.hdltvin.dat");
    mHdltvoutHandle.open("conv1_lif_top.hdltvout.dat");
}

conv1_lif_top::~conv1_lif_top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete conv1_lif_top_entry3_U0;
    delete ConvolutionInputGene_U0;
    delete Block_ZN8ap_fixedIL_U0;
    delete Matrix_Vector_Activa_U0;
    delete numReps_c_U;
    delete numReps_c8_U;
    delete convInp_V_V_U;
    delete mul_ln124_loc_channe_U;
    delete start_for_Block_ZJfO_U;
}

void conv1_lif_top::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void conv1_lif_top::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ConvolutionInputGene_U0_ap_ready.read()))) {
        ConvolutionInputGene_U0_ap_ready_count = (!ConvolutionInputGene_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ConvolutionInputGene_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ConvolutionInputGene_U0_ap_ready.read()))) {
        ConvolutionInputGene_U0_ap_ready_count = (!ConvolutionInputGene_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ConvolutionInputGene_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_ConvolutionInputGene_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_ConvolutionInputGene_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_ConvolutionInputGene_U0_ap_ready = ap_sync_ConvolutionInputGene_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready = ap_sync_conv1_lif_top_entry3_U0_ap_ready.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_0, conv1_lif_top_entry3_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()))) {
        conv1_lif_top_entry3_U0_ap_ready_count = (!conv1_lif_top_entry3_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(conv1_lif_top_entry3_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(conv1_lif_top_entry3_U0_ap_ready.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()))) {
        conv1_lif_top_entry3_U0_ap_ready_count = (!conv1_lif_top_entry3_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(conv1_lif_top_entry3_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
}

void conv1_lif_top::thread_Block_ZN8ap_fixedIL_U0_ap_continue() {
    Block_ZN8ap_fixedIL_U0_ap_continue = mul_ln124_loc_channe_full_n.read();
}

void conv1_lif_top::thread_Block_ZN8ap_fixedIL_U0_ap_start() {
    Block_ZN8ap_fixedIL_U0_ap_start = start_for_Block_ZN8ap_fixedIL_U0_empty_n.read();
}

void conv1_lif_top::thread_Block_ZN8ap_fixedIL_U0_start_full_n() {
    Block_ZN8ap_fixedIL_U0_start_full_n = ap_const_logic_1;
}

void conv1_lif_top::thread_Block_ZN8ap_fixedIL_U0_start_write() {
    Block_ZN8ap_fixedIL_U0_start_write = ap_const_logic_0;
}

void conv1_lif_top::thread_ConvolutionInputGene_U0_ap_continue() {
    ConvolutionInputGene_U0_ap_continue = ap_const_logic_1;
}

void conv1_lif_top::thread_ConvolutionInputGene_U0_ap_start() {
    ConvolutionInputGene_U0_ap_start = (ap_start.read() & (ap_sync_reg_ConvolutionInputGene_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void conv1_lif_top::thread_ConvolutionInputGene_U0_start_full_n() {
    ConvolutionInputGene_U0_start_full_n = ap_const_logic_1;
}

void conv1_lif_top::thread_ConvolutionInputGene_U0_start_write() {
    ConvolutionInputGene_U0_start_write = ap_const_logic_0;
}

void conv1_lif_top::thread_Matrix_Vector_Activa_U0_ap_continue() {
    Matrix_Vector_Activa_U0_ap_continue = ap_const_logic_1;
}

void conv1_lif_top::thread_Matrix_Vector_Activa_U0_ap_start() {
    Matrix_Vector_Activa_U0_ap_start = mul_ln124_loc_channe_empty_n.read();
}

void conv1_lif_top::thread_Matrix_Vector_Activa_U0_start_full_n() {
    Matrix_Vector_Activa_U0_start_full_n = ap_const_logic_1;
}

void conv1_lif_top::thread_Matrix_Vector_Activa_U0_start_write() {
    Matrix_Vector_Activa_U0_start_write = ap_const_logic_0;
}

void conv1_lif_top::thread_ap_channel_done_mul_ln124_loc_channe() {
    ap_channel_done_mul_ln124_loc_channe = Block_ZN8ap_fixedIL_U0_ap_done.read();
}

void conv1_lif_top::thread_ap_done() {
    ap_done = Matrix_Vector_Activa_U0_ap_done.read();
}

void conv1_lif_top::thread_ap_idle() {
    ap_idle = (conv1_lif_top_entry3_U0_ap_idle.read() & ConvolutionInputGene_U0_ap_idle.read() & Block_ZN8ap_fixedIL_U0_ap_idle.read() & Matrix_Vector_Activa_U0_ap_idle.read() & (mul_ln124_loc_channe_empty_n.read() ^ 
  ap_const_logic_1));
}

void conv1_lif_top::thread_ap_ready() {
    ap_ready = ap_sync_ready.read();
}

void conv1_lif_top::thread_ap_sync_ConvolutionInputGene_U0_ap_ready() {
    ap_sync_ConvolutionInputGene_U0_ap_ready = (ConvolutionInputGene_U0_ap_ready.read() | ap_sync_reg_ConvolutionInputGene_U0_ap_ready.read());
}

void conv1_lif_top::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void conv1_lif_top::thread_ap_sync_conv1_lif_top_entry3_U0_ap_ready() {
    ap_sync_conv1_lif_top_entry3_U0_ap_ready = (conv1_lif_top_entry3_U0_ap_ready.read() | ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready.read());
}

void conv1_lif_top::thread_ap_sync_done() {
    ap_sync_done = Matrix_Vector_Activa_U0_ap_done.read();
}

void conv1_lif_top::thread_ap_sync_ready() {
    ap_sync_ready = (ap_sync_conv1_lif_top_entry3_U0_ap_ready.read() & ap_sync_ConvolutionInputGene_U0_ap_ready.read());
}

void conv1_lif_top::thread_conv1_lif_top_entry3_U0_ap_continue() {
    conv1_lif_top_entry3_U0_ap_continue = ap_const_logic_1;
}

void conv1_lif_top::thread_conv1_lif_top_entry3_U0_ap_start() {
    conv1_lif_top_entry3_U0_ap_start = (ap_start.read() & (ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void conv1_lif_top::thread_in_V_V_read() {
    in_V_V_read = ConvolutionInputGene_U0_in_V_V_read.read();
}

void conv1_lif_top::thread_out_V_V_din() {
    out_V_V_din = Matrix_Vector_Activa_U0_out_V_V_din.read();
}

void conv1_lif_top::thread_out_V_V_write() {
    out_V_V_write = Matrix_Vector_Activa_U0_out_V_V_write.read();
}

void conv1_lif_top::thread_start_for_Block_ZN8ap_fixedIL_U0_din() {
    start_for_Block_ZN8ap_fixedIL_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void conv1_lif_top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"in_V_V_dout\" :  \"" << in_V_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_V_empty_n\" :  \"" << in_V_V_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_V_V_read\" :  \"" << in_V_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_V_din\" :  \"" << out_V_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V_V_full_n\" :  \"" << out_V_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_V_write\" :  \"" << out_V_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"numReps\" :  \"" << numReps.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

