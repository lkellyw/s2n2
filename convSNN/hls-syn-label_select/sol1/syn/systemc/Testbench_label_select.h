// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Testbench_label_select_HH_
#define _Testbench_label_select_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "StreamingDataWidthCo.h"
#include "LabelSelect_Batch.h"
#include "fifo_w80_d2_A.h"
#include "fifo_w32_d2_A.h"
#include "start_for_LabelSecud.h"

namespace ap_rtl {

struct Testbench_label_select : public sc_module {
    // Port declarations 13
    sc_in< sc_lv<16> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<4> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_in< sc_lv<32> > numReps;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Testbench_label_select(sc_module_name name);
    SC_HAS_PROCESS(Testbench_label_select);

    ~Testbench_label_select();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    StreamingDataWidthCo* StreamingDataWidthCo_U0;
    LabelSelect_Batch* LabelSelect_Batch_U0;
    fifo_w80_d2_A* wa_input_V_V_U;
    fifo_w32_d2_A* numReps_c_U;
    start_for_LabelSecud* start_for_LabelSecud_U;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_ap_start;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_ap_done;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_ap_continue;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_ap_idle;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_ap_ready;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_start_out;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_start_write;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_in_V_V_read;
    sc_signal< sc_lv<80> > StreamingDataWidthCo_U0_out_V_V_din;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_out_V_V_write;
    sc_signal< sc_lv<32> > StreamingDataWidthCo_U0_numReps_out_din;
    sc_signal< sc_logic > StreamingDataWidthCo_U0_numReps_out_write;
    sc_signal< sc_logic > LabelSelect_Batch_U0_ap_start;
    sc_signal< sc_logic > LabelSelect_Batch_U0_ap_done;
    sc_signal< sc_logic > LabelSelect_Batch_U0_ap_continue;
    sc_signal< sc_logic > LabelSelect_Batch_U0_ap_idle;
    sc_signal< sc_logic > LabelSelect_Batch_U0_ap_ready;
    sc_signal< sc_logic > LabelSelect_Batch_U0_in_V_V_read;
    sc_signal< sc_lv<4> > LabelSelect_Batch_U0_out_V_V_din;
    sc_signal< sc_logic > LabelSelect_Batch_U0_out_V_V_write;
    sc_signal< sc_logic > LabelSelect_Batch_U0_numReps_read;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > wa_input_V_V_full_n;
    sc_signal< sc_lv<80> > wa_input_V_V_dout;
    sc_signal< sc_logic > wa_input_V_V_empty_n;
    sc_signal< sc_logic > numReps_c_full_n;
    sc_signal< sc_lv<32> > numReps_c_dout;
    sc_signal< sc_logic > numReps_c_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_LabelSelect_Batch_U0_din;
    sc_signal< sc_logic > start_for_LabelSelect_Batch_U0_full_n;
    sc_signal< sc_lv<1> > start_for_LabelSelect_Batch_U0_dout;
    sc_signal< sc_logic > start_for_LabelSelect_Batch_U0_empty_n;
    sc_signal< sc_logic > LabelSelect_Batch_U0_start_full_n;
    sc_signal< sc_logic > LabelSelect_Batch_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_LabelSelect_Batch_U0_ap_continue();
    void thread_LabelSelect_Batch_U0_ap_start();
    void thread_LabelSelect_Batch_U0_start_full_n();
    void thread_LabelSelect_Batch_U0_start_write();
    void thread_StreamingDataWidthCo_U0_ap_continue();
    void thread_StreamingDataWidthCo_U0_ap_start();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_in_V_V_read();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_start_for_LabelSelect_Batch_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
