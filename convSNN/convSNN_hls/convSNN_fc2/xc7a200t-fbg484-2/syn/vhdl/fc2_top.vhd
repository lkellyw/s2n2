-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc2_top is
port (
    in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    numReps : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of fc2_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fc2_top,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.303000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=133,HLS_SYN_LUT=303,HLS_VERSION=2020_1}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Matrix_Vector_Activa_U0_ap_start : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_ap_done : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_ap_continue : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_ap_idle : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_ap_ready : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_in_V_V_read : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_out_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal Matrix_Vector_Activa_U0_out_V_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_start_full_n : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_start_write : STD_LOGIC;

    component Matrix_Vector_Activa IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        reps : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Matrix_Vector_Activa_U0 : component Matrix_Vector_Activa
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Matrix_Vector_Activa_U0_ap_start,
        ap_done => Matrix_Vector_Activa_U0_ap_done,
        ap_continue => Matrix_Vector_Activa_U0_ap_continue,
        ap_idle => Matrix_Vector_Activa_U0_ap_idle,
        ap_ready => Matrix_Vector_Activa_U0_ap_ready,
        in_V_V_dout => in_V_V_dout,
        in_V_V_empty_n => in_V_V_empty_n,
        in_V_V_read => Matrix_Vector_Activa_U0_in_V_V_read,
        out_V_V_din => Matrix_Vector_Activa_U0_out_V_V_din,
        out_V_V_full_n => out_V_V_full_n,
        out_V_V_write => Matrix_Vector_Activa_U0_out_V_V_write,
        reps => numReps);




    Matrix_Vector_Activa_U0_ap_continue <= ap_const_logic_1;
    Matrix_Vector_Activa_U0_ap_start <= ap_start;
    Matrix_Vector_Activa_U0_start_full_n <= ap_const_logic_1;
    Matrix_Vector_Activa_U0_start_write <= ap_const_logic_0;
    ap_done <= Matrix_Vector_Activa_U0_ap_done;
    ap_idle <= Matrix_Vector_Activa_U0_ap_idle;
    ap_ready <= Matrix_Vector_Activa_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Matrix_Vector_Activa_U0_ap_done;
    ap_sync_ready <= Matrix_Vector_Activa_U0_ap_ready;
    in_V_V_read <= Matrix_Vector_Activa_U0_in_V_V_read;
    out_V_V_din <= Matrix_Vector_Activa_U0_out_V_V_din;
    out_V_V_write <= Matrix_Vector_Activa_U0_out_V_V_write;
end behav;
