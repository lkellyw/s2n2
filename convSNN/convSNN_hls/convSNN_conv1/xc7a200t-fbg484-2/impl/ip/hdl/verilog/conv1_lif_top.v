// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv1_lif_top,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=10.741500,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=32,HLS_SYN_DSP=4,HLS_SYN_FF=1556,HLS_SYN_LUT=4731,HLS_VERSION=2020_1}" *)

module conv1_lif_top (
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        numReps,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


input  [2:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [31:0] numReps;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    conv1_lif_top_entry3_U0_ap_start;
wire    conv1_lif_top_entry3_U0_ap_done;
wire    conv1_lif_top_entry3_U0_ap_continue;
wire    conv1_lif_top_entry3_U0_ap_idle;
wire    conv1_lif_top_entry3_U0_ap_ready;
wire    conv1_lif_top_entry3_U0_start_out;
wire    conv1_lif_top_entry3_U0_start_write;
wire   [31:0] conv1_lif_top_entry3_U0_numReps_out_din;
wire    conv1_lif_top_entry3_U0_numReps_out_write;
wire   [31:0] conv1_lif_top_entry3_U0_numReps_out1_din;
wire    conv1_lif_top_entry3_U0_numReps_out1_write;
wire    ConvolutionInputGene_U0_ap_start;
wire    ConvolutionInputGene_U0_ap_done;
wire    ConvolutionInputGene_U0_ap_continue;
wire    ConvolutionInputGene_U0_ap_idle;
wire    ConvolutionInputGene_U0_ap_ready;
wire    ConvolutionInputGene_U0_in_V_V_read;
wire   [2:0] ConvolutionInputGene_U0_out_V_V_din;
wire    ConvolutionInputGene_U0_out_V_V_write;
wire    ConvolutionInputGene_U0_numReps_read;
wire    Block_ZN8ap_fixedIL_U0_ap_start;
wire    Block_ZN8ap_fixedIL_U0_ap_done;
wire    Block_ZN8ap_fixedIL_U0_ap_continue;
wire    Block_ZN8ap_fixedIL_U0_ap_idle;
wire    Block_ZN8ap_fixedIL_U0_ap_ready;
wire    Block_ZN8ap_fixedIL_U0_numReps_read;
wire   [31:0] Block_ZN8ap_fixedIL_U0_ap_return;
wire    ap_channel_done_mul_ln124_loc_channe;
wire    mul_ln124_loc_channe_full_n;
wire    Matrix_Vector_Activa_U0_ap_start;
wire    Matrix_Vector_Activa_U0_ap_done;
wire    Matrix_Vector_Activa_U0_ap_continue;
wire    Matrix_Vector_Activa_U0_ap_idle;
wire    Matrix_Vector_Activa_U0_ap_ready;
wire    Matrix_Vector_Activa_U0_in_V_V_read;
wire   [31:0] Matrix_Vector_Activa_U0_out_V_V_din;
wire    Matrix_Vector_Activa_U0_out_V_V_write;
wire    ap_sync_continue;
wire    numReps_c_full_n;
wire   [31:0] numReps_c_dout;
wire    numReps_c_empty_n;
wire    numReps_c8_full_n;
wire   [31:0] numReps_c8_dout;
wire    numReps_c8_empty_n;
wire    convInp_V_V_full_n;
wire   [2:0] convInp_V_V_dout;
wire    convInp_V_V_empty_n;
wire   [31:0] mul_ln124_loc_channe_dout;
wire    mul_ln124_loc_channe_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready;
wire    ap_sync_conv1_lif_top_entry3_U0_ap_ready;
reg   [1:0] conv1_lif_top_entry3_U0_ap_ready_count;
reg    ap_sync_reg_ConvolutionInputGene_U0_ap_ready;
wire    ap_sync_ConvolutionInputGene_U0_ap_ready;
reg   [1:0] ConvolutionInputGene_U0_ap_ready_count;
wire   [0:0] start_for_Block_ZN8ap_fixedIL_U0_din;
wire    start_for_Block_ZN8ap_fixedIL_U0_full_n;
wire   [0:0] start_for_Block_ZN8ap_fixedIL_U0_dout;
wire    start_for_Block_ZN8ap_fixedIL_U0_empty_n;
wire    ConvolutionInputGene_U0_start_full_n;
wire    ConvolutionInputGene_U0_start_write;
wire    Block_ZN8ap_fixedIL_U0_start_full_n;
wire    Block_ZN8ap_fixedIL_U0_start_write;
wire    Matrix_Vector_Activa_U0_start_full_n;
wire    Matrix_Vector_Activa_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready = 1'b0;
#0 conv1_lif_top_entry3_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_ConvolutionInputGene_U0_ap_ready = 1'b0;
#0 ConvolutionInputGene_U0_ap_ready_count = 2'd0;
end

conv1_lif_top_entry3 conv1_lif_top_entry3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(conv1_lif_top_entry3_U0_ap_start),
    .start_full_n(start_for_Block_ZN8ap_fixedIL_U0_full_n),
    .ap_done(conv1_lif_top_entry3_U0_ap_done),
    .ap_continue(conv1_lif_top_entry3_U0_ap_continue),
    .ap_idle(conv1_lif_top_entry3_U0_ap_idle),
    .ap_ready(conv1_lif_top_entry3_U0_ap_ready),
    .start_out(conv1_lif_top_entry3_U0_start_out),
    .start_write(conv1_lif_top_entry3_U0_start_write),
    .numReps(numReps),
    .numReps_out_din(conv1_lif_top_entry3_U0_numReps_out_din),
    .numReps_out_full_n(numReps_c_full_n),
    .numReps_out_write(conv1_lif_top_entry3_U0_numReps_out_write),
    .numReps_out1_din(conv1_lif_top_entry3_U0_numReps_out1_din),
    .numReps_out1_full_n(numReps_c8_full_n),
    .numReps_out1_write(conv1_lif_top_entry3_U0_numReps_out1_write)
);

ConvolutionInputGene ConvolutionInputGene_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ConvolutionInputGene_U0_ap_start),
    .ap_done(ConvolutionInputGene_U0_ap_done),
    .ap_continue(ConvolutionInputGene_U0_ap_continue),
    .ap_idle(ConvolutionInputGene_U0_ap_idle),
    .ap_ready(ConvolutionInputGene_U0_ap_ready),
    .in_V_V_dout(in_V_V_dout),
    .in_V_V_empty_n(in_V_V_empty_n),
    .in_V_V_read(ConvolutionInputGene_U0_in_V_V_read),
    .out_V_V_din(ConvolutionInputGene_U0_out_V_V_din),
    .out_V_V_full_n(convInp_V_V_full_n),
    .out_V_V_write(ConvolutionInputGene_U0_out_V_V_write),
    .numReps_dout(numReps_c_dout),
    .numReps_empty_n(numReps_c_empty_n),
    .numReps_read(ConvolutionInputGene_U0_numReps_read)
);

Block_ZN8ap_fixedIL Block_ZN8ap_fixedIL_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_ZN8ap_fixedIL_U0_ap_start),
    .ap_done(Block_ZN8ap_fixedIL_U0_ap_done),
    .ap_continue(Block_ZN8ap_fixedIL_U0_ap_continue),
    .ap_idle(Block_ZN8ap_fixedIL_U0_ap_idle),
    .ap_ready(Block_ZN8ap_fixedIL_U0_ap_ready),
    .numReps_dout(numReps_c8_dout),
    .numReps_empty_n(numReps_c8_empty_n),
    .numReps_read(Block_ZN8ap_fixedIL_U0_numReps_read),
    .ap_return(Block_ZN8ap_fixedIL_U0_ap_return)
);

Matrix_Vector_Activa Matrix_Vector_Activa_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Matrix_Vector_Activa_U0_ap_start),
    .ap_done(Matrix_Vector_Activa_U0_ap_done),
    .ap_continue(Matrix_Vector_Activa_U0_ap_continue),
    .ap_idle(Matrix_Vector_Activa_U0_ap_idle),
    .ap_ready(Matrix_Vector_Activa_U0_ap_ready),
    .in_V_V_dout(convInp_V_V_dout),
    .in_V_V_empty_n(convInp_V_V_empty_n),
    .in_V_V_read(Matrix_Vector_Activa_U0_in_V_V_read),
    .out_V_V_din(Matrix_Vector_Activa_U0_out_V_V_din),
    .out_V_V_full_n(out_V_V_full_n),
    .out_V_V_write(Matrix_Vector_Activa_U0_out_V_V_write),
    .reps(mul_ln124_loc_channe_dout)
);

fifo_w32_d2_A numReps_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(conv1_lif_top_entry3_U0_numReps_out_din),
    .if_full_n(numReps_c_full_n),
    .if_write(conv1_lif_top_entry3_U0_numReps_out_write),
    .if_dout(numReps_c_dout),
    .if_empty_n(numReps_c_empty_n),
    .if_read(ConvolutionInputGene_U0_numReps_read)
);

fifo_w32_d2_A numReps_c8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(conv1_lif_top_entry3_U0_numReps_out1_din),
    .if_full_n(numReps_c8_full_n),
    .if_write(conv1_lif_top_entry3_U0_numReps_out1_write),
    .if_dout(numReps_c8_dout),
    .if_empty_n(numReps_c8_empty_n),
    .if_read(Block_ZN8ap_fixedIL_U0_numReps_read)
);

fifo_w3_d2_A convInp_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ConvolutionInputGene_U0_out_V_V_din),
    .if_full_n(convInp_V_V_full_n),
    .if_write(ConvolutionInputGene_U0_out_V_V_write),
    .if_dout(convInp_V_V_dout),
    .if_empty_n(convInp_V_V_empty_n),
    .if_read(Matrix_Vector_Activa_U0_in_V_V_read)
);

fifo_w32_d2_A mul_ln124_loc_channe_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_ZN8ap_fixedIL_U0_ap_return),
    .if_full_n(mul_ln124_loc_channe_full_n),
    .if_write(Block_ZN8ap_fixedIL_U0_ap_done),
    .if_dout(mul_ln124_loc_channe_dout),
    .if_empty_n(mul_ln124_loc_channe_empty_n),
    .if_read(Matrix_Vector_Activa_U0_ap_ready)
);

start_for_Block_ZJfO start_for_Block_ZJfO_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_Block_ZN8ap_fixedIL_U0_din),
    .if_full_n(start_for_Block_ZN8ap_fixedIL_U0_full_n),
    .if_write(conv1_lif_top_entry3_U0_start_write),
    .if_dout(start_for_Block_ZN8ap_fixedIL_U0_dout),
    .if_empty_n(start_for_Block_ZN8ap_fixedIL_U0_empty_n),
    .if_read(Block_ZN8ap_fixedIL_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_ConvolutionInputGene_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_ConvolutionInputGene_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_ConvolutionInputGene_U0_ap_ready <= ap_sync_ConvolutionInputGene_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready <= ap_sync_conv1_lif_top_entry3_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ConvolutionInputGene_U0_ap_ready) & (ap_sync_ready == 1'b1))) begin
        ConvolutionInputGene_U0_ap_ready_count <= (ConvolutionInputGene_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (1'b1 == ConvolutionInputGene_U0_ap_ready))) begin
        ConvolutionInputGene_U0_ap_ready_count <= (ConvolutionInputGene_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((conv1_lif_top_entry3_U0_ap_ready == 1'b0) & (ap_sync_ready == 1'b1))) begin
        conv1_lif_top_entry3_U0_ap_ready_count <= (conv1_lif_top_entry3_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (conv1_lif_top_entry3_U0_ap_ready == 1'b1))) begin
        conv1_lif_top_entry3_U0_ap_ready_count <= (conv1_lif_top_entry3_U0_ap_ready_count + 2'd1);
    end
end

assign Block_ZN8ap_fixedIL_U0_ap_continue = mul_ln124_loc_channe_full_n;

assign Block_ZN8ap_fixedIL_U0_ap_start = start_for_Block_ZN8ap_fixedIL_U0_empty_n;

assign Block_ZN8ap_fixedIL_U0_start_full_n = 1'b1;

assign Block_ZN8ap_fixedIL_U0_start_write = 1'b0;

assign ConvolutionInputGene_U0_ap_continue = 1'b1;

assign ConvolutionInputGene_U0_ap_start = ((ap_sync_reg_ConvolutionInputGene_U0_ap_ready ^ 1'b1) & ap_start);

assign ConvolutionInputGene_U0_start_full_n = 1'b1;

assign ConvolutionInputGene_U0_start_write = 1'b0;

assign Matrix_Vector_Activa_U0_ap_continue = 1'b1;

assign Matrix_Vector_Activa_U0_ap_start = mul_ln124_loc_channe_empty_n;

assign Matrix_Vector_Activa_U0_start_full_n = 1'b1;

assign Matrix_Vector_Activa_U0_start_write = 1'b0;

assign ap_channel_done_mul_ln124_loc_channe = Block_ZN8ap_fixedIL_U0_ap_done;

assign ap_done = Matrix_Vector_Activa_U0_ap_done;

assign ap_idle = ((mul_ln124_loc_channe_empty_n ^ 1'b1) & conv1_lif_top_entry3_U0_ap_idle & Matrix_Vector_Activa_U0_ap_idle & ConvolutionInputGene_U0_ap_idle & Block_ZN8ap_fixedIL_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_ConvolutionInputGene_U0_ap_ready = (ap_sync_reg_ConvolutionInputGene_U0_ap_ready | ConvolutionInputGene_U0_ap_ready);

assign ap_sync_continue = 1'b1;

assign ap_sync_conv1_lif_top_entry3_U0_ap_ready = (conv1_lif_top_entry3_U0_ap_ready | ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready);

assign ap_sync_done = Matrix_Vector_Activa_U0_ap_done;

assign ap_sync_ready = (ap_sync_conv1_lif_top_entry3_U0_ap_ready & ap_sync_ConvolutionInputGene_U0_ap_ready);

assign conv1_lif_top_entry3_U0_ap_continue = 1'b1;

assign conv1_lif_top_entry3_U0_ap_start = ((ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready ^ 1'b1) & ap_start);

assign in_V_V_read = ConvolutionInputGene_U0_in_V_V_read;

assign out_V_V_din = Matrix_Vector_Activa_U0_out_V_V_din;

assign out_V_V_write = Matrix_Vector_Activa_U0_out_V_V_write;

assign start_for_Block_ZN8ap_fixedIL_U0_din = 1'b1;

endmodule //conv1_lif_top
