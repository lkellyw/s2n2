-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_lif_top is
port (
    in_V_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    numReps : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of conv1_lif_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv1_lif_top,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2577-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.628000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=32,HLS_SYN_DSP=4,HLS_SYN_FF=1520,HLS_SYN_LUT=4756,HLS_VERSION=2020_1}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal conv1_lif_top_entry3_U0_ap_start : STD_LOGIC;
    signal conv1_lif_top_entry3_U0_ap_done : STD_LOGIC;
    signal conv1_lif_top_entry3_U0_ap_continue : STD_LOGIC;
    signal conv1_lif_top_entry3_U0_ap_idle : STD_LOGIC;
    signal conv1_lif_top_entry3_U0_ap_ready : STD_LOGIC;
    signal conv1_lif_top_entry3_U0_start_out : STD_LOGIC;
    signal conv1_lif_top_entry3_U0_start_write : STD_LOGIC;
    signal conv1_lif_top_entry3_U0_numReps_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_lif_top_entry3_U0_numReps_out_write : STD_LOGIC;
    signal conv1_lif_top_entry3_U0_numReps_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_lif_top_entry3_U0_numReps_out1_write : STD_LOGIC;
    signal ConvolutionInputGene_U0_ap_start : STD_LOGIC;
    signal ConvolutionInputGene_U0_ap_done : STD_LOGIC;
    signal ConvolutionInputGene_U0_ap_continue : STD_LOGIC;
    signal ConvolutionInputGene_U0_ap_idle : STD_LOGIC;
    signal ConvolutionInputGene_U0_ap_ready : STD_LOGIC;
    signal ConvolutionInputGene_U0_in_V_V_read : STD_LOGIC;
    signal ConvolutionInputGene_U0_out_V_V_din : STD_LOGIC_VECTOR (2 downto 0);
    signal ConvolutionInputGene_U0_out_V_V_write : STD_LOGIC;
    signal ConvolutionInputGene_U0_numReps_read : STD_LOGIC;
    signal Block_ZN8ap_fixedIL_U0_ap_start : STD_LOGIC;
    signal Block_ZN8ap_fixedIL_U0_ap_done : STD_LOGIC;
    signal Block_ZN8ap_fixedIL_U0_ap_continue : STD_LOGIC;
    signal Block_ZN8ap_fixedIL_U0_ap_idle : STD_LOGIC;
    signal Block_ZN8ap_fixedIL_U0_ap_ready : STD_LOGIC;
    signal Block_ZN8ap_fixedIL_U0_numReps_read : STD_LOGIC;
    signal Block_ZN8ap_fixedIL_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_mul_ln124_loc_channe : STD_LOGIC;
    signal mul_ln124_loc_channe_full_n : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_ap_start : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_ap_done : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_ap_continue : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_ap_idle : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_ap_ready : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_in_V_V_read : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_out_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Matrix_Vector_Activa_U0_out_V_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal numReps_c_full_n : STD_LOGIC;
    signal numReps_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numReps_c_empty_n : STD_LOGIC;
    signal numReps_c8_full_n : STD_LOGIC;
    signal numReps_c8_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numReps_c8_empty_n : STD_LOGIC;
    signal convInp_V_V_full_n : STD_LOGIC;
    signal convInp_V_V_dout : STD_LOGIC_VECTOR (2 downto 0);
    signal convInp_V_V_empty_n : STD_LOGIC;
    signal mul_ln124_loc_channe_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln124_loc_channe_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_conv1_lif_top_entry3_U0_ap_ready : STD_LOGIC;
    signal conv1_lif_top_entry3_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_ConvolutionInputGene_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_ConvolutionInputGene_U0_ap_ready : STD_LOGIC;
    signal ConvolutionInputGene_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_Block_ZN8ap_fixedIL_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_ZN8ap_fixedIL_U0_full_n : STD_LOGIC;
    signal start_for_Block_ZN8ap_fixedIL_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_ZN8ap_fixedIL_U0_empty_n : STD_LOGIC;
    signal ConvolutionInputGene_U0_start_full_n : STD_LOGIC;
    signal ConvolutionInputGene_U0_start_write : STD_LOGIC;
    signal Block_ZN8ap_fixedIL_U0_start_full_n : STD_LOGIC;
    signal Block_ZN8ap_fixedIL_U0_start_write : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_start_full_n : STD_LOGIC;
    signal Matrix_Vector_Activa_U0_start_write : STD_LOGIC;

    component conv1_lif_top_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        numReps : IN STD_LOGIC_VECTOR (31 downto 0);
        numReps_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numReps_out_full_n : IN STD_LOGIC;
        numReps_out_write : OUT STD_LOGIC;
        numReps_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numReps_out1_full_n : IN STD_LOGIC;
        numReps_out1_write : OUT STD_LOGIC );
    end component;


    component ConvolutionInputGene IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        numReps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numReps_empty_n : IN STD_LOGIC;
        numReps_read : OUT STD_LOGIC );
    end component;


    component Block_ZN8ap_fixedIL IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        numReps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numReps_empty_n : IN STD_LOGIC;
        numReps_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Matrix_Vector_Activa IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        reps : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w3_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (2 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Block_ZJfO IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    conv1_lif_top_entry3_U0 : component conv1_lif_top_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => conv1_lif_top_entry3_U0_ap_start,
        start_full_n => start_for_Block_ZN8ap_fixedIL_U0_full_n,
        ap_done => conv1_lif_top_entry3_U0_ap_done,
        ap_continue => conv1_lif_top_entry3_U0_ap_continue,
        ap_idle => conv1_lif_top_entry3_U0_ap_idle,
        ap_ready => conv1_lif_top_entry3_U0_ap_ready,
        start_out => conv1_lif_top_entry3_U0_start_out,
        start_write => conv1_lif_top_entry3_U0_start_write,
        numReps => numReps,
        numReps_out_din => conv1_lif_top_entry3_U0_numReps_out_din,
        numReps_out_full_n => numReps_c_full_n,
        numReps_out_write => conv1_lif_top_entry3_U0_numReps_out_write,
        numReps_out1_din => conv1_lif_top_entry3_U0_numReps_out1_din,
        numReps_out1_full_n => numReps_c8_full_n,
        numReps_out1_write => conv1_lif_top_entry3_U0_numReps_out1_write);

    ConvolutionInputGene_U0 : component ConvolutionInputGene
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ConvolutionInputGene_U0_ap_start,
        ap_done => ConvolutionInputGene_U0_ap_done,
        ap_continue => ConvolutionInputGene_U0_ap_continue,
        ap_idle => ConvolutionInputGene_U0_ap_idle,
        ap_ready => ConvolutionInputGene_U0_ap_ready,
        in_V_V_dout => in_V_V_dout,
        in_V_V_empty_n => in_V_V_empty_n,
        in_V_V_read => ConvolutionInputGene_U0_in_V_V_read,
        out_V_V_din => ConvolutionInputGene_U0_out_V_V_din,
        out_V_V_full_n => convInp_V_V_full_n,
        out_V_V_write => ConvolutionInputGene_U0_out_V_V_write,
        numReps_dout => numReps_c_dout,
        numReps_empty_n => numReps_c_empty_n,
        numReps_read => ConvolutionInputGene_U0_numReps_read);

    Block_ZN8ap_fixedIL_U0 : component Block_ZN8ap_fixedIL
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_ZN8ap_fixedIL_U0_ap_start,
        ap_done => Block_ZN8ap_fixedIL_U0_ap_done,
        ap_continue => Block_ZN8ap_fixedIL_U0_ap_continue,
        ap_idle => Block_ZN8ap_fixedIL_U0_ap_idle,
        ap_ready => Block_ZN8ap_fixedIL_U0_ap_ready,
        numReps_dout => numReps_c8_dout,
        numReps_empty_n => numReps_c8_empty_n,
        numReps_read => Block_ZN8ap_fixedIL_U0_numReps_read,
        ap_return => Block_ZN8ap_fixedIL_U0_ap_return);

    Matrix_Vector_Activa_U0 : component Matrix_Vector_Activa
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Matrix_Vector_Activa_U0_ap_start,
        ap_done => Matrix_Vector_Activa_U0_ap_done,
        ap_continue => Matrix_Vector_Activa_U0_ap_continue,
        ap_idle => Matrix_Vector_Activa_U0_ap_idle,
        ap_ready => Matrix_Vector_Activa_U0_ap_ready,
        in_V_V_dout => convInp_V_V_dout,
        in_V_V_empty_n => convInp_V_V_empty_n,
        in_V_V_read => Matrix_Vector_Activa_U0_in_V_V_read,
        out_V_V_din => Matrix_Vector_Activa_U0_out_V_V_din,
        out_V_V_full_n => out_V_V_full_n,
        out_V_V_write => Matrix_Vector_Activa_U0_out_V_V_write,
        reps => mul_ln124_loc_channe_dout);

    numReps_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv1_lif_top_entry3_U0_numReps_out_din,
        if_full_n => numReps_c_full_n,
        if_write => conv1_lif_top_entry3_U0_numReps_out_write,
        if_dout => numReps_c_dout,
        if_empty_n => numReps_c_empty_n,
        if_read => ConvolutionInputGene_U0_numReps_read);

    numReps_c8_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv1_lif_top_entry3_U0_numReps_out1_din,
        if_full_n => numReps_c8_full_n,
        if_write => conv1_lif_top_entry3_U0_numReps_out1_write,
        if_dout => numReps_c8_dout,
        if_empty_n => numReps_c8_empty_n,
        if_read => Block_ZN8ap_fixedIL_U0_numReps_read);

    convInp_V_V_U : component fifo_w3_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ConvolutionInputGene_U0_out_V_V_din,
        if_full_n => convInp_V_V_full_n,
        if_write => ConvolutionInputGene_U0_out_V_V_write,
        if_dout => convInp_V_V_dout,
        if_empty_n => convInp_V_V_empty_n,
        if_read => Matrix_Vector_Activa_U0_in_V_V_read);

    mul_ln124_loc_channe_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_ZN8ap_fixedIL_U0_ap_return,
        if_full_n => mul_ln124_loc_channe_full_n,
        if_write => Block_ZN8ap_fixedIL_U0_ap_done,
        if_dout => mul_ln124_loc_channe_dout,
        if_empty_n => mul_ln124_loc_channe_empty_n,
        if_read => Matrix_Vector_Activa_U0_ap_ready);

    start_for_Block_ZJfO_U : component start_for_Block_ZJfO
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_ZN8ap_fixedIL_U0_din,
        if_full_n => start_for_Block_ZN8ap_fixedIL_U0_full_n,
        if_write => conv1_lif_top_entry3_U0_start_write,
        if_dout => start_for_Block_ZN8ap_fixedIL_U0_dout,
        if_empty_n => start_for_Block_ZN8ap_fixedIL_U0_empty_n,
        if_read => Block_ZN8ap_fixedIL_U0_ap_ready);





    ap_sync_reg_ConvolutionInputGene_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_ConvolutionInputGene_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_ConvolutionInputGene_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_ConvolutionInputGene_U0_ap_ready <= ap_sync_ConvolutionInputGene_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready <= ap_sync_conv1_lif_top_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ConvolutionInputGene_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = ConvolutionInputGene_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                ConvolutionInputGene_U0_ap_ready_count <= std_logic_vector(unsigned(ConvolutionInputGene_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = ConvolutionInputGene_U0_ap_ready))) then 
                ConvolutionInputGene_U0_ap_ready_count <= std_logic_vector(unsigned(ConvolutionInputGene_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    conv1_lif_top_entry3_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((conv1_lif_top_entry3_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                conv1_lif_top_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(conv1_lif_top_entry3_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (conv1_lif_top_entry3_U0_ap_ready = ap_const_logic_1))) then 
                conv1_lif_top_entry3_U0_ap_ready_count <= std_logic_vector(unsigned(conv1_lif_top_entry3_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_ZN8ap_fixedIL_U0_ap_continue <= mul_ln124_loc_channe_full_n;
    Block_ZN8ap_fixedIL_U0_ap_start <= start_for_Block_ZN8ap_fixedIL_U0_empty_n;
    Block_ZN8ap_fixedIL_U0_start_full_n <= ap_const_logic_1;
    Block_ZN8ap_fixedIL_U0_start_write <= ap_const_logic_0;
    ConvolutionInputGene_U0_ap_continue <= ap_const_logic_1;
    ConvolutionInputGene_U0_ap_start <= ((ap_sync_reg_ConvolutionInputGene_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ConvolutionInputGene_U0_start_full_n <= ap_const_logic_1;
    ConvolutionInputGene_U0_start_write <= ap_const_logic_0;
    Matrix_Vector_Activa_U0_ap_continue <= ap_const_logic_1;
    Matrix_Vector_Activa_U0_ap_start <= mul_ln124_loc_channe_empty_n;
    Matrix_Vector_Activa_U0_start_full_n <= ap_const_logic_1;
    Matrix_Vector_Activa_U0_start_write <= ap_const_logic_0;
    ap_channel_done_mul_ln124_loc_channe <= Block_ZN8ap_fixedIL_U0_ap_done;
    ap_done <= Matrix_Vector_Activa_U0_ap_done;
    ap_idle <= ((mul_ln124_loc_channe_empty_n xor ap_const_logic_1) and conv1_lif_top_entry3_U0_ap_idle and Matrix_Vector_Activa_U0_ap_idle and ConvolutionInputGene_U0_ap_idle and Block_ZN8ap_fixedIL_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_ConvolutionInputGene_U0_ap_ready <= (ap_sync_reg_ConvolutionInputGene_U0_ap_ready or ConvolutionInputGene_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_conv1_lif_top_entry3_U0_ap_ready <= (conv1_lif_top_entry3_U0_ap_ready or ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready);
    ap_sync_done <= Matrix_Vector_Activa_U0_ap_done;
    ap_sync_ready <= (ap_sync_conv1_lif_top_entry3_U0_ap_ready and ap_sync_ConvolutionInputGene_U0_ap_ready);
    conv1_lif_top_entry3_U0_ap_continue <= ap_const_logic_1;
    conv1_lif_top_entry3_U0_ap_start <= ((ap_sync_reg_conv1_lif_top_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    in_V_V_read <= ConvolutionInputGene_U0_in_V_V_read;
    out_V_V_din <= Matrix_Vector_Activa_U0_out_V_V_din;
    out_V_V_write <= Matrix_Vector_Activa_U0_out_V_V_write;
    start_for_Block_ZN8ap_fixedIL_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
