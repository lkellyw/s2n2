-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Testbench_label_select is
port (
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    numReps : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of Testbench_label_select is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Testbench_label_select,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.430000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1270,HLS_SYN_LUT=1795,HLS_VERSION=2020_1}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal StreamingDataWidthCo_U0_ap_start : STD_LOGIC;
    signal StreamingDataWidthCo_U0_ap_done : STD_LOGIC;
    signal StreamingDataWidthCo_U0_ap_continue : STD_LOGIC;
    signal StreamingDataWidthCo_U0_ap_idle : STD_LOGIC;
    signal StreamingDataWidthCo_U0_ap_ready : STD_LOGIC;
    signal StreamingDataWidthCo_U0_start_out : STD_LOGIC;
    signal StreamingDataWidthCo_U0_start_write : STD_LOGIC;
    signal StreamingDataWidthCo_U0_in_V_V_read : STD_LOGIC;
    signal StreamingDataWidthCo_U0_out_V_V_din : STD_LOGIC_VECTOR (79 downto 0);
    signal StreamingDataWidthCo_U0_out_V_V_write : STD_LOGIC;
    signal StreamingDataWidthCo_U0_numReps_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal StreamingDataWidthCo_U0_numReps_out_write : STD_LOGIC;
    signal LabelSelect_Batch_U0_ap_start : STD_LOGIC;
    signal LabelSelect_Batch_U0_ap_done : STD_LOGIC;
    signal LabelSelect_Batch_U0_ap_continue : STD_LOGIC;
    signal LabelSelect_Batch_U0_ap_idle : STD_LOGIC;
    signal LabelSelect_Batch_U0_ap_ready : STD_LOGIC;
    signal LabelSelect_Batch_U0_in_V_V_read : STD_LOGIC;
    signal LabelSelect_Batch_U0_out_V_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal LabelSelect_Batch_U0_out_V_V_write : STD_LOGIC;
    signal LabelSelect_Batch_U0_numReps_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal wa_input_V_V_full_n : STD_LOGIC;
    signal wa_input_V_V_dout : STD_LOGIC_VECTOR (79 downto 0);
    signal wa_input_V_V_empty_n : STD_LOGIC;
    signal numReps_c_full_n : STD_LOGIC;
    signal numReps_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numReps_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_LabelSelect_Batch_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_LabelSelect_Batch_U0_full_n : STD_LOGIC;
    signal start_for_LabelSelect_Batch_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_LabelSelect_Batch_U0_empty_n : STD_LOGIC;
    signal LabelSelect_Batch_U0_start_full_n : STD_LOGIC;
    signal LabelSelect_Batch_U0_start_write : STD_LOGIC;

    component StreamingDataWidthCo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (79 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        numReps : IN STD_LOGIC_VECTOR (31 downto 0);
        numReps_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numReps_out_full_n : IN STD_LOGIC;
        numReps_out_write : OUT STD_LOGIC );
    end component;


    component LabelSelect_Batch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (79 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC;
        numReps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numReps_empty_n : IN STD_LOGIC;
        numReps_read : OUT STD_LOGIC );
    end component;


    component fifo_w80_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (79 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (79 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_LabelSecud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    StreamingDataWidthCo_U0 : component StreamingDataWidthCo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => StreamingDataWidthCo_U0_ap_start,
        start_full_n => start_for_LabelSelect_Batch_U0_full_n,
        ap_done => StreamingDataWidthCo_U0_ap_done,
        ap_continue => StreamingDataWidthCo_U0_ap_continue,
        ap_idle => StreamingDataWidthCo_U0_ap_idle,
        ap_ready => StreamingDataWidthCo_U0_ap_ready,
        start_out => StreamingDataWidthCo_U0_start_out,
        start_write => StreamingDataWidthCo_U0_start_write,
        in_V_V_dout => in_V_V_dout,
        in_V_V_empty_n => in_V_V_empty_n,
        in_V_V_read => StreamingDataWidthCo_U0_in_V_V_read,
        out_V_V_din => StreamingDataWidthCo_U0_out_V_V_din,
        out_V_V_full_n => wa_input_V_V_full_n,
        out_V_V_write => StreamingDataWidthCo_U0_out_V_V_write,
        numReps => numReps,
        numReps_out_din => StreamingDataWidthCo_U0_numReps_out_din,
        numReps_out_full_n => numReps_c_full_n,
        numReps_out_write => StreamingDataWidthCo_U0_numReps_out_write);

    LabelSelect_Batch_U0 : component LabelSelect_Batch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => LabelSelect_Batch_U0_ap_start,
        ap_done => LabelSelect_Batch_U0_ap_done,
        ap_continue => LabelSelect_Batch_U0_ap_continue,
        ap_idle => LabelSelect_Batch_U0_ap_idle,
        ap_ready => LabelSelect_Batch_U0_ap_ready,
        in_V_V_dout => wa_input_V_V_dout,
        in_V_V_empty_n => wa_input_V_V_empty_n,
        in_V_V_read => LabelSelect_Batch_U0_in_V_V_read,
        out_V_V_din => LabelSelect_Batch_U0_out_V_V_din,
        out_V_V_full_n => out_V_V_full_n,
        out_V_V_write => LabelSelect_Batch_U0_out_V_V_write,
        numReps_dout => numReps_c_dout,
        numReps_empty_n => numReps_c_empty_n,
        numReps_read => LabelSelect_Batch_U0_numReps_read);

    wa_input_V_V_U : component fifo_w80_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => StreamingDataWidthCo_U0_out_V_V_din,
        if_full_n => wa_input_V_V_full_n,
        if_write => StreamingDataWidthCo_U0_out_V_V_write,
        if_dout => wa_input_V_V_dout,
        if_empty_n => wa_input_V_V_empty_n,
        if_read => LabelSelect_Batch_U0_in_V_V_read);

    numReps_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => StreamingDataWidthCo_U0_numReps_out_din,
        if_full_n => numReps_c_full_n,
        if_write => StreamingDataWidthCo_U0_numReps_out_write,
        if_dout => numReps_c_dout,
        if_empty_n => numReps_c_empty_n,
        if_read => LabelSelect_Batch_U0_numReps_read);

    start_for_LabelSecud_U : component start_for_LabelSecud
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_LabelSelect_Batch_U0_din,
        if_full_n => start_for_LabelSelect_Batch_U0_full_n,
        if_write => StreamingDataWidthCo_U0_start_write,
        if_dout => start_for_LabelSelect_Batch_U0_dout,
        if_empty_n => start_for_LabelSelect_Batch_U0_empty_n,
        if_read => LabelSelect_Batch_U0_ap_ready);




    LabelSelect_Batch_U0_ap_continue <= ap_const_logic_1;
    LabelSelect_Batch_U0_ap_start <= start_for_LabelSelect_Batch_U0_empty_n;
    LabelSelect_Batch_U0_start_full_n <= ap_const_logic_1;
    LabelSelect_Batch_U0_start_write <= ap_const_logic_0;
    StreamingDataWidthCo_U0_ap_continue <= ap_const_logic_1;
    StreamingDataWidthCo_U0_ap_start <= ap_start;
    ap_done <= LabelSelect_Batch_U0_ap_done;
    ap_idle <= (StreamingDataWidthCo_U0_ap_idle and LabelSelect_Batch_U0_ap_idle);
    ap_ready <= StreamingDataWidthCo_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= LabelSelect_Batch_U0_ap_done;
    ap_sync_ready <= StreamingDataWidthCo_U0_ap_ready;
    in_V_V_read <= StreamingDataWidthCo_U0_in_V_V_read;
    out_V_V_din <= LabelSelect_Batch_U0_out_V_V_din;
    out_V_V_write <= LabelSelect_Batch_U0_out_V_V_write;
    start_for_LabelSelect_Batch_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
